# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS
# graphic logo are (registered/a) trademark(s) of Plan International.
---
- hosts: localhost
  tasks:
    - name: Create MongoDB replicate key file locally
      local_action: shell openssl rand -base64 755 > /tmp/mongodb-keyfile
- hosts: all
  become: yes
  become_method: sudo
  tasks:
    - name: 'Check mandatory variables are defined'
      assert:
        that:
          - mongodb_admin_username is defined
          - mongodb_admin_password is defined
          - elasticsearch_superuser_password is defined
    - name: 'Add docker repository key'
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: 'Add docker repository'
      apt_repository: repo='deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable' state=present
      when: ansible_distribution == "Ubuntu"

    - name: 'Install docker'
      apt: name=docker-ce state=present update_cache=yes install_recommends=yes allow_unauthenticated=yes
      when: ansible_distribution == "Ubuntu"
      retries: 3
      delay: 20

    - name: 'Ensure Docker service started'
      service: name=docker state=started

    - name: 'Get docker info'
      shell: docker info
      register: docker_info
      changed_when: False

    - name: 'Install pip3'
      apt:
        name: python3-pip
        state: present

    - name: 'Install pexpect python module for ansible expect commands'
      pip:
        name: pexpect

    - name: 'Install docker python module for ansible docker commands'
      pip:
        name: docker

    - name: 'Log into DockerHub'
      docker_login:
        username: '{{dockerhub_username}}'
        password: '{{dockerhub_password}}'

    - name: 'Setup crontab to clean up docker images'
      cron:
        name: 'cleanup docker images'
        minute: '0'
        hour: '0'
        job: '/usr/bin/docker system prune -af >> /var/log/docker-prune.log'

    - name: Inserts Elasticsearch super user username environment variable to crontab
      cron:
        name: ELASTICSEARCH_ADMIN_USER
        env: yes
        job: 'elastic'
      when: elasticsearch_superuser_password is defined

    - name: Inserts Elasticsearch super user password environment variable to crontab
      cron:
        name: ELASTICSEARCH_ADMIN_PASSWORD
        env: yes
        job: '{{ elasticsearch_superuser_password }}'
      when: elasticsearch_superuser_password is defined

    - name: Inserts Elasticsearch super user password environment variable to crontab
      cron:
        name: ELASTICSEARCH_SUPERUSER_PASSWORD
        env: yes
        job: '{{ elasticsearch_superuser_password }}'
      when: elasticsearch_superuser_password is defined

    - name: Inserts MongoDB username environment variable to crontab
      cron:
        name: MONGODB_ADMIN_USER
        env: yes
        job: '{{ mongodb_admin_username }}'
      when: mongodb_admin_username is defined

    - name: Inserts MongoDB password environment variable to crontab
      cron:
        name: MONGODB_ADMIN_PASSWORD
        env: yes
        job: '{{ mongodb_admin_password }}'
      when: mongodb_admin_password is defined

    - name: 'Setup crontab to backup the opencrvs data'
      cron:
        name: 'backup opencrvs'
        minute: '0'
        hour: '0'
        job: 'cd / && bash /tmp/compose/infrastructure/emergency-backup-metadata.sh {{ external_backup_server_user }} {{ external_backup_server_ip }} {{ external_backup_server_ssh_port }} {{ manager_production_server_ip }} {{ external_backup_server_remote_directory }} 5 >> /var/log/opencrvs-backup.log 2>&1'
      when: external_backup_server_ip is defined

    - name: Copy MongoDB replication security key file to nodes
      copy: src=/tmp/mongodb-keyfile dest=/mongodb-keyfile mode=0400 force=no

    - name: Change access right of key file
      file:
        path: /mongodb-keyfile
        state: file
        owner: 1000
        group: 1000

    - name: 'Check file for encrypted file system exists'
      stat:
        path: /cryptfs_file_sparse.img
        get_checksum: False
        get_md5: False
      register: st

    - name: 'Bootstrap encrypted data folder'
      script: ../cryptfs/bootstrap.sh -s 100g -p {{encrypt_passphrase}}
      when: (not st.stat.exists) and encrypt_data

    - name: 'Mount encrypted data folder'
      script: ../cryptfs/mount.sh -p {{encrypt_passphrase}}
      when: st.stat.exists and encrypt_data

    # https://stackoverflow.com/a/24765946
    - name: Create swap file
      command:
        dd if=/dev/zero of={{ swap_file_path }} bs=1024 count={{ swap_file_size_mb }}k
        creates="{{ swap_file_path }}"
      tags:
        - swap.file.create

    - name: Change swap file permissions
      file: path="{{ swap_file_path }}"
        owner=root
        group=root
        mode=0600
      tags:
        - swap.file.permissions

    - name: 'Check swap file type'
      command: file {{ swap_file_path }}
      register: swapfile
      tags:
        - swap.file.mkswap

    - name: Make swap file
      command: 'sudo mkswap {{ swap_file_path }}'
      when: swapfile.stdout.find('swap file') == -1
      tags:
        - swap.file.mkswap

    - name: Write swap entry in fstab
      mount: name=none
        src={{ swap_file_path }}
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      tags:
        - swap.fstab

    - name: Mount swap
      command: 'swapon {{ swap_file_path }}'
      when: ansible_swaptotal_mb < 1
      tags:
        - swap.file.swapon

    - name: 'Create mongo data directory'
      file:
        path: /data/mongo
        state: directory

    - name: 'Create mongo backup directory'
      file:
        path: /data/backups/mongo
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx

    - name: 'Create traefik data directory'
      file:
        path: /data/traefik
        state: directory

    - name: 'Create elasticsearch data directory'
      file:
        path: /data/elasticsearch
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx

    - name: 'Create elasticsearch backup directory'
      file:
        path: /data/backups/elasticsearch
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx

    - name: 'Install UFW'
      apt:
        name: ufw
        state: present

    - name: 'Allow OpenSSH through UFW'
      ufw:
        rule: allow
        name: OpenSSH

    - name: 'Copy logrotate script'
      copy:
        src: ../logrotate.conf
        dest: /etc/

    - name: 'Save system logs to Papertrail'
      register: papaertrailSystemLogs
      shell: ' cd / && wget -qO - --header="X-Papertrail-Token: {{ papertrail_token }}" \ https://papertrailapp.com/destinations/16712142/setup.sh | sudo bash >> /var/log/papertrail.log 2>&1'
      when: papertrail_token is defined
    # Docker swarm ports - Note: all published docker container port will override UFW rules!
    - name: 'Allow secure docker client communication'
      ufw:
        rule: allow
        port: 2376
        proto: tcp
    - name: 'Allow docker swarm communication among nodes - TCP'
      ufw:
        rule: allow
        port: 7946
        proto: tcp
    - name: 'Allow docker swarm communication among nodes - UDP'
      ufw:
        rule: allow
        port: 7946
        proto: udp
    - name: 'Allow docker overlay network traffic'
      ufw:
        rule: allow
        port: 4789
        proto: udp

    - name: 'Deny everything else and enable UFW'
      ufw:
        state: enabled
        default: deny
        direction: incoming

- hosts: docker-manager-first
  become: yes
  become_method: sudo
  tasks:
    - name: 'Allow secure docker swarm node communication (managers only)'
      ufw:
        rule: allow
        port: 2377
        proto: tcp

    - name: 'Create primary swarm manager'
      shell: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: "docker_info.stdout.find('Swarm: inactive') != -1"

    - name: 'Get docker swarm manager token'
      shell: docker swarm join-token -q manager
      register: manager_token

    - name: 'Get docker swarm worker token'
      shell: docker swarm join-token -q worker
      register: worker_token

    - name: 'Set higher max map count for elastic search'
      sysctl:
        name: vm.max_map_count
        value: 262144
        state: present

    - name: 'Create influxdb data directory'
      file:
        path: /data/influxdb
        state: directory

    - name: 'Create influxdb backup directory'
      file:
        path: /data/backups/influxdb
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx

    - name: 'Create acme file for traefik'
      file:
        path: /data/traefik/acme.json
        state: touch
        mode: '600'

- hosts: docker-workers
  become: yes
  become_method: sudo
  tasks:
    - name: 'Join as a worker'
      shell: "docker swarm join --token {{ hostvars['manager1']['worker_token']['stdout'] }} {{ hostvars['manager1']['ansible_default_ipv4']['address'] }}:2377"
      when: "docker_info.stdout.find('Swarm: inactive') != -1"
      retries: 3
      delay: 20

- hosts: docker-manager-first
  become: yes
  become_method: sudo
  tasks:
    - name: 'Label node as data1'
      shell: docker node update --label-add data1=true {{ data1_hostname }}
    - name: 'Label node as data2'
      shell: docker node update --label-add data2=true {{ data2_hostname }}
    - name: 'Label node as data3'
      shell: docker node update --label-add data3=true {{ data3_hostname }}
    - name: 'Label node as data4'
      shell: docker node update --label-add data4=true {{ data4_hostname }}
    - name: 'Label node as data5'
      shell: docker node update --label-add data5=true {{ data5_hostname }}
